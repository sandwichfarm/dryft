// Copyright 2024 The Tungsten Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/browser/resources/nostr_resource_handler.h"

#include "base/memory/ref_counted_memory.h"
#include "base/strings/string_util.h"
#include "chrome/browser/browser_process.h"
#include "chrome/browser/profiles/profile.h"
#include "chrome/browser/profiles/profile_manager.h"
#include "chrome/grit/nostr_resources.h"
#include "content/public/browser/browser_thread.h"
#include "net/base/mime_util.h"
#include "ui/base/resource/resource_bundle.h"
#include "url/gurl.h"

namespace chrome {

NostrResourceHandler::NostrResourceHandler() = default;
NostrResourceHandler::~NostrResourceHandler() = default;

std::string NostrResourceHandler::GetSource() {
  return "resources/js/nostr";
}

void NostrResourceHandler::StartDataRequest(
    const GURL& url,
    const content::WebContents::Getter& wc_getter,
    content::URLDataSource::GotDataCallback callback) {
  std::string path = url.path();
  
  // Get the resource ID for this path
  int resource_id = GetResourceIdForPath(path);
  
  if (resource_id == 0) {
    // Resource not found
    std::move(callback).Run(nullptr);
    return;
  }
  
  // Load the resource from the resource bundle
  scoped_refptr<base::RefCountedMemory> data =
      ui::ResourceBundle::GetSharedInstance().LoadDataResourceBytes(
          resource_id);
  
  std::move(callback).Run(data);
}

std::string NostrResourceHandler::GetMimeType(const GURL& url) {
  // All our resources are JavaScript files
  return "application/javascript";
}

bool NostrResourceHandler::ShouldServeMimeTypeAsContentTypeHeader() {
  return true;
}

void NostrResourceHandler::AddResponseHeaders(
    const GURL& url,
    content::HttpResponseHeaders* headers) {
  // Allow cross-origin requests from any origin
  headers->SetHeader("Access-Control-Allow-Origin", "*");
  
  // Set long cache duration (1 year)
  headers->SetHeader("Cache-Control", "public, max-age=31536000");
  
  // Security headers
  headers->SetHeader("X-Content-Type-Options", "nosniff");
}

bool NostrResourceHandler::AllowCaching() {
  // Allow caching of these resources
  return true;
}

int NostrResourceHandler::GetResourceIdForPath(const std::string& path) const {
  // Map library paths to resource IDs
  // These IDs will be generated by the build system
  if (path == "/ndk.js" || path == "ndk.js") {
    return IDR_NOSTR_NDK_JS;
  } else if (path == "/nostr-tools.js" || path == "nostr-tools.js") {
    return IDR_NOSTR_TOOLS_JS;
  } else if (path == "/applesauce.js" || path == "applesauce.js") {
    return IDR_NOSTR_APPLESAUCE_JS;
  } else if (path == "/nostrify.js" || path == "nostrify.js") {
    return IDR_NOSTR_NOSTRIFY_JS;
  } else if (path == "/alby-sdk.js" || path == "alby-sdk.js") {
    return IDR_NOSTR_ALBY_SDK_JS;
  }
  
  return 0;  // Resource not found
}

void RegisterNostrResources() {
  Profile* profile = ProfileManager::GetActiveUserProfile();
  if (profile) {
    content::URLDataSource::Add(
        profile,
        std::make_unique<NostrResourceHandler>());
  }
}

}  // namespace chrome