# Copyright 2024 The Tungsten Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/features.gni")
import("//components/nostr/BUILD.gn")

if (enable_nostr) {
  source_set("nostr") {
    sources = [
      "extension_migration_service.cc",
      "extension_migration_service.h",
      "extension_migration_service_factory.cc",
      "extension_migration_service_factory.h",
      "key_encryption.cc",
      "key_encryption.h",
      "key_storage_factory.cc",
      "key_storage_factory.h",
      "key_storage_in_memory.cc",
      "key_storage_in_memory.h",
      "key_storage_interface.h",
      "nostr_browser_utils.cc",
      "nostr_browser_utils.h",
      "nostr_permission_manager.cc",
      "nostr_permission_manager.h",
      "nostr_permission_manager_factory.cc",
      "nostr_permission_manager_factory.h",
      "nostr_passphrase_manager.cc",
      "nostr_passphrase_manager.h",
      "nostr_passphrase_manager_factory.cc",
      "nostr_passphrase_manager_factory.h",
      "nostr_service.cc",
      "nostr_service.h",
      "nostr_service_factory.cc",
      "nostr_service_factory.h",
    ]

    deps = [
      "//base",
      "//chrome/browser/profiles",
      "//chrome/browser/resources:nostr_resource_handler",
      "//chrome/browser/ui",
      "//chrome/common",
      "//chrome/common:nostr_scheme",
      "//components/keyed_service/content",
      "//components/nostr",
      "//components/prefs",
      "//content/public/browser",
      "//crypto",
      "//net",
      "//third_party/boringssl",
      "//third_party/leveldb",
      "//ui/views",
      "//url",
      "protocol",
      "nsite",
    ]
    
    if (is_win) {
      sources += [
        "key_storage_windows.cc",
        "key_storage_windows.h",
      ]
    }
    
    if (is_mac) {
      sources += [
        "key_storage_mac.h",
        "key_storage_mac.mm",
        "mac_keychain_manager.h",
        "mac_keychain_manager.mm",
      ]
      
      frameworks = [
        "Foundation.framework",
        "Security.framework",
      ]
    }
    
    if (is_linux) {
      sources += [
        "key_storage_linux.cc",
        "key_storage_linux.h",
        "secret_service_client.cc",
        "secret_service_client.h",
        "file_fallback_storage.cc",
        "file_fallback_storage.h",
      ]
      
      pkg_config("libsecret") {
        packages = [ "libsecret-1" ]
      }
      
      configs += [ ":libsecret" ]
    }
  }

  source_set("relay_client") {
    sources = [
      "relay_client/relay_connection.cc",
      "relay_client/relay_connection.h",
    ]

    deps = [
      "//base",
      "//components/nostr",
      "//net",
      "//services/network/public/cpp",
      "//services/network/public/mojom",
      "//url",
    ]
  }

  source_set("resolver") {
    sources = [
      "resolver/profile_event_resolver.cc",
      "resolver/profile_event_resolver.h",
    ]

    deps = [
      ":relay_client",
      ":local_relay",
      "//base",
      "//components/nostr",
      "//net",
      "//url",
    ]
  }

  source_set("local_relay") {
    sources = [
      "local_relay/connection_manager.cc",
      "local_relay/connection_manager.h",
      "local_relay/local_relay_config.cc",
      "local_relay/local_relay_config.h",
      "local_relay/local_relay_service.cc",
      "local_relay/local_relay_service.h",
      "local_relay/local_relay_service_factory.cc",
      "local_relay/local_relay_service_factory.h",
      "local_relay/nostr_database.cc",
      "local_relay/nostr_database.h",
      "local_relay/nostr_database_migration.cc",
      "local_relay/nostr_database_migration.h",
      "local_relay/nostr_database_schema.h",
      "local_relay/protocol_handler.cc",
      "local_relay/protocol_handler.h",
    ]

    deps = [
      "//base",
      "//chrome/browser/profiles",
      "//components/keyed_service/content",
      "//components/nostr",
      "//components/prefs",
      "//content/public/browser",
      "//crypto",
      "//net",
      "//net/server:http_server",
      "//sql",
      "//third_party/boringssl",
    ]
    
    defines = [ "ENABLE_NOSTR=1" ]
  }

  source_set("nostr_browser_tests") {
    testonly = true
    sources = [
      "nostr_protocol_handler_browsertest.cc",
      "nostr_permission_dialog_browsertest.cc",
    ]

    deps = [
      ":nostr",
      "//chrome/test:test_support",
      "//chrome/test:test_support_ui",
      "//components/nostr:nostr",
      "//testing/gtest",
    ]
  }

  source_set("unit_tests") {
    testonly = true
    sources = [
      "extension_migration_service_unittest.cc",
      "key_encryption_unittest.cc",
      "key_storage_integration_unittest.cc",
      "nostr_passphrase_manager_unittest.cc",
      "nostr_permission_manager_unittest.cc",
      "multi_account_service_test.cc",
    ]
    
    if (is_win) {
      sources += [ "key_storage_windows_unittest.cc" ]
    }
    
    if (is_mac) {
      sources += [ "key_storage_mac_unittest.cc" ]
    }
    
    if (is_linux) {
      sources += [ 
        "key_storage_linux_unittest.cc",
        "secret_service_client_unittest.cc"
      ]
    }

    deps = [
      ":nostr",
      "//base",
      "//chrome/test:test_support",
      "//content/test:test_support",
      "//testing/gtest",
      
      # Include local relay tests
      "//chrome/browser/nostr/local_relay:local_relay_unittests",
      
      # Include nsite tests
      "//chrome/browser/nostr/nsite:unit_tests",
    ]
  }

  source_set("resolver_unittests") {
    testonly = true
    sources = [
      "resolver/profile_event_resolver_unittest.cc",
    ]

    deps = [
      ":resolver",
      ":local_relay",
      "//base",
      "//base/test:test_support",
      "//components/nostr",
      "//testing/gtest",
    ]
  }

  source_set("local_relay_unittests") {
    testonly = true
    sources = [
      "local_relay/local_relay_config_unittest.cc",
      "local_relay/local_relay_service_unittest.cc",
      "local_relay/nostr_database_unittest.cc",
    ]

    deps = [
      ":local_relay",
      "//base",
      "//base/test:test_support",
      "//net",
      "//net:test_support",
      "//sql",
      "//sql:test_support",
      "//testing/gtest",
    ]
    
    defines = [ "ENABLE_NOSTR=1" ]
  }
  
  # Alias to make extension migration service accessible from other BUILD.gn files
  source_set("extension_migration_service") {
    public_deps = [ ":nostr" ]
  }

  # Performance testing suite
  source_set("performance_tests") {
    testonly = true
    public_deps = [ "performance:performance_tests" ]
  }
}